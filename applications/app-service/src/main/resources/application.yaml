server:
  port: ${SERVER_PORT:8083}

spring:
  application:
    name: ${SPRING_APP_NAME:Solicitudes}
  devtools:
    add-properties: false
  h2:
    console:
      enabled: true
      path: "/h2"
  profiles:
    include: ${SPRING_PROFILES_INCLUDE:}

adapters:
  r2dbc:
    host: ${R2DBC_HOST:localhost}
    port: ${R2DBC_PORT:5432}
    database: ${R2DBC_DATABASE:credi_ya}
    schema: ${R2DBC_SCHEMA:public}
    username: ${R2DBC_USERNAME:credi_user}
    password: ${R2DBC_PASSWORD:user}

management:
  endpoints:
    web:
      exposure:
        include: "health,prometheus"
  endpoint:
    health:
      probes:
        enabled: true
  health:
    circuitbreakers:
      enabled: true

cors:
  allowed-origins: ${CORS_ALLOWED_ORIGINS:http://localhost:4200,http://localhost:8082}

adapter:
  restconsumer:
    timeout: 5000
    url: ${RESTCONSUMER_URL:http://localhost:8082}   # ðŸ‘ˆ para apuntar a AutenticaciÃ³n en docker

resilience4j:
  circuitbreaker:
    instances:
      testGet:
        registerHealthIndicator: true
        failureRateThreshold: 50
        slowCallRateThreshold: 50
        slowCallDurationThreshold: "2s"
        permittedNumberOfCallsInHalfOpenState: 3
        slidingWindowSize: 10
        minimumNumberOfCalls: 10
        waitDurationInOpenState: "10s"
      testPost:
        registerHealthIndicator: true
        failureRateThreshold: 50
        slowCallRateThreshold: 50
        slowCallDurationThreshold: "2s"
        permittedNumberOfCallsInHalfOpenState: 3
        slidingWindowSize: 10
        minimumNumberOfCalls: 10
        waitDurationInOpenState: "10s"

security:
  jwt:
    secret: ${SPRING_SECURITY_JWT_SECRET:0Dz2RFrDttxXG9ZgQ9s6nJ8lcnFv9HQ1mFtuG3B0TXQ=}
    expiration-ms: ${SPRING_SECURITY_JWT_EXPIRATION_MS:3600000} # 1 hora
